import type { VercelRequest, VercelResponse } from '@vercel/node';
import { sql } from './_lib/db.js';
async function ensure(){ await sql`create table if not exists products( id uuid primary key default gen_random_uuid(), name text not null, sku text unique, unit text, price numeric(12,2) default 0, created_at timestamptz default now() );`; await sql`create index if not exists products_name_idx on products (lower(name));`; }
export default async function handler(req: VercelRequest, res: VercelResponse){ await ensure(); const {method, query}=req;
  if(method==='GET'){ if(query.id){ const r:any[] = await sql`select * from products where id=${String(query.id)} limit 1;`; return res.status(200).json(r[0]??null);} const q=query.q?`%${String(query.q).toLowerCase()}%`:null; let rows:any[]; if(q) rows = await sql`select * from products where lower(name) like ${q} order by created_at desc limit 200;`; else rows = await sql`select * from products order by created_at desc limit 200;`; return res.status(200).json(rows); }
  if(method==='POST'){ const b=(req.body??{}) as any; const r:any[] = await sql`insert into products(name,sku,unit,price) values (${b.name}, ${b.sku??null}, ${b.unit??null}, ${b.price??0}) returning *;`; return res.status(201).json(r[0]); }
  if(method==='PUT'){ const b=(req.body??{}) as any; if(!b.id) return res.status(400).json({message:'missing id'}); const r:any[] = await sql`update products set name=${b.name}, sku=${b.sku??null}, unit=${b.unit??null}, price=${b.price??0} where id=${b.id} returning *;`; return res.status(200).json(r[0]); }
  if(method==='DELETE'){ const id=String((req.query.id ?? (req.body as any)?.id) ?? ''); if(!id) return res.status(400).json({message:'missing id'}); await sql`delete from products where id=${id}`; return res.status(200).json({ok:true}); }
  return res.status(405).end(); }
