import type { VercelRequest, VercelResponse } from '@vercel/node';
import { sql } from './_lib/db.js';
async function ensure(){ await sql`create table if not exists entries( id uuid primary key default gen_random_uuid(), client_id uuid references clients(id) on delete set null, product_id uuid references products(id) on delete set null, qty_received integer default 0, qty_delivered integer default 0, status text not null default 'pending' check (status in ('pending','partial','delivered')), note text, created_at timestamptz default now() );`; await sql`create index if not exists entries_client_idx on entries (client_id);`; }
export default async function handler(req: VercelRequest, res: VercelResponse){ await ensure(); const {method, query}=req;
  if(method==='GET'){ if(query.id){ const r:any[] = await sql`select * from entries where id=${String(query.id)} limit 1;`; return res.status(200).json(r[0]??null);} const rows:any[] = await sql`select * from entries order by created_at desc limit 500;`; return res.status(200).json(rows); }
  if(method==='POST'){ const b=(req.body??{}) as any; const r:any[] = await sql`insert into entries(client_id,product_id,qty_received,qty_delivered,status,note) values (${b.client_id??null}, ${b.product_id??null}, ${b.qty_received??0}, ${b.qty_delivered??0}, ${b.status??'pending'}, ${b.note??null}) returning *;`; return res.status(201).json(r[0]); }
  if(method==='PUT'){ const b=(req.body??{}) as any; if(!b.id) return res.status(400).json({message:'missing id'}); const r:any[] = await sql`update entries set client_id=${b.client_id??null}, product_id=${b.product_id??null}, qty_received=${b.qty_received??0}, qty_delivered=${b.qty_delivered??0}, status=${b.status??'pending'}, note=${b.note??null} where id=${b.id} returning *;`; return res.status(200).json(r[0]); }
  if(method==='DELETE'){ const id=String((req.query.id ?? (req.body as any)?.id) ?? ''); if(!id) return res.status(400).json({message:'missing id'}); await sql`delete from entries where id=${id}`; return res.status(200).json({ok:true}); }
  return res.status(405).end(); }
